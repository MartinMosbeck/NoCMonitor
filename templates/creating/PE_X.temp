//TEMPLATE parameters:
// X = PE ID
// SEND_COUNTER_INCREMENT = how much is added in each cycle to the
//     send_cycle_cnt; If send_cycle_cnt>=10 a packet is sent
// DEST  = Destination for normal packets
// PIR  = Packet Injection Rate
// DEST_STAT = Destination of STAT
// WINDOW_END = at which time STAT infos should be collected 
// FIFO_LEN = length of the internal sending FIFO

`include "connect_parameters.v"

//##################### 
//#MODULE DECLARATION # 
//#####################
module PE_{{ X }}
(
	en,        
	clk,
	rst_n,
	
	flit_in,
	flit_out,
	sendFlit,
	en_receiveFlit,

	credit_in,
	credit_out,
	sendCredit,
	en_receiveCredit,

	count_N,
	count_E,
	count_S,
	count_W,

	windowCnt,

	recvPortID
);

//################### 
//#LOCAL parameters # 
//###################

	parameter vc_bits = (`NUM_VCS > 1) ? $clog2(`NUM_VCS) : 1;
	parameter dest_bits = $clog2(`NUM_USER_RECV_PORTS);
	parameter flit_port_width = 2 /*valid and tail bits*/+ `FLIT_DATA_WIDTH + dest_bits + vc_bits;
	parameter credit_port_width = 1 + vc_bits; // 1 valid bit
	parameter credit_cnt_width = $clog2(`FLIT_BUFFER_DEPTH + 1);

	parameter windowBits = `FLIT_DATA_WIDTH - 4 - dest_bits; //minus because: |<header(4)>|<src>|<count> 
	parameter windowEnd = 200; //parameter windowEnd = {{ WINDOW_END }};  

	parameter fifo_len = 20; //parameter fifo_len = {{FIFO_LEN}} ;
	parameter fifo_ptr_width = $clog2(fifo_len);
	parameter fifo_cnt_width = $clog2(fifo_len+1);


//#################
//# PORTS + TYPES #
//#################

	/* enable, clock, reset */
	input en;	
	wire  en;
	input clk;	
	wire  clk; 
	input rst_n;	
	wire  rst_n;

	/* flit handling */
	input  [flit_port_width-1:0] flit_in;	
	wire   [flit_port_width-1:0] flit_in;
	output [flit_port_width-1:0] flit_out;
	reg    [flit_port_width-1:0] flit_out;
	output sendFlit;
	reg    sendFlit;
	output en_receiveFlit;
	reg    en_receiveFlit;

	/* credit handling */
	input  [credit_port_width-1:0] credit_in;
	wire   [credit_port_width-1:0] credit_in;
	output [credit_port_width-1:0] credit_out;
	reg    [credit_port_width-1:0] credit_out;
	output sendCredit;
	reg    sendCredit;
	output en_receiveCredit;
	reg    en_receiveCredit;

	/* receive port id */
	input [dest_bits-1:0] recvPortID;
	wire  [dest_bits-1:0] recvPortID;

	/* router packet counters */
	input  [`FLIT_DATA_WIDTH-1:0] count_N;	
	wire   [`FLIT_DATA_WIDTH-1:0] count_N;
	input  [`FLIT_DATA_WIDTH-1:0] count_E;	
	wire   [`FLIT_DATA_WIDTH-1:0] count_E;
	input  [`FLIT_DATA_WIDTH-1:0] count_S;	
	wire   [`FLIT_DATA_WIDTH-1:0] count_S;
	input  [`FLIT_DATA_WIDTH-1:0] count_W;	
	wire   [`FLIT_DATA_WIDTH-1:0] count_W;

	/* global counter to identify window time */
	input [windowBits-1:0] windowCnt;
	wire [windowBits-1:0] windowCnt;

//#######################
//# CREDIT HOUSEKEEPING #
//#######################
	/* credits per vc for sending */
	reg [credit_cnt_width -1 : 0] cnt_credit [0 : `NUM_VCS -1];

//#########################
//# SENDING FLITS CONTROL #
//#########################

	/* send counter */
	reg [3:0] send_cycle_cnt;
	
	/* own address */	
	reg [dest_bits-1:0] src;

	/* packet helpers fields */
	reg is_valid;
	reg is_tail;
	reg [vc_bits-1:0] vc;
	reg [`FLIT_DATA_WIDTH-1:0] data;

	/* destinations */
	reg [dest_bits-1:0] dest_STAT;
	reg [dest_bits-1:0] dest;

//########################
//# COUNTERS RECV & SEND #
//########################
	reg [windowBits-1:0] count_recv;
	reg [windowBits-1:0] count_send;

//#######
//# ETC #
//#######
	integer i; //for loops
	reg [`FLIT_DATA_WIDTH - 1 : 0] dataCnt;
        reg [windowBits-1:0] cntWindowTime;
//########
//# FIFO #
//########
	reg [flit_port_width -1 : 0] fifo_data [fifo_len-1 : 0];
	reg [fifo_ptr_width -1 : 0] r_ptr;
	reg [fifo_ptr_width -1 : 0] w_ptr;
	reg fifo_empty;
	reg fifo_full;
	reg [fifo_cnt_width-1 : 0] fifo_cnt;

/*-------- has FIFO space for x elements --------*/
	function hasSpace;
		input [fifo_ptr_width-1:0] neededSpace;
	begin
		hasSpace = ( (fifo_len - fifo_cnt) >= neededSpace )? 1:0;
	end
	endfunction

/*-------- return w_ptr + x --------*/
	function [fifo_ptr_width -1 : 0] w_ptr_plus;
		input [fifo_ptr_width -1 : 0] value;
	begin
		if(value > (fifo_len - 1 - w_ptr) )
			w_ptr_plus = value - (fifo_len-w_ptr);
		else
			w_ptr_plus = w_ptr + value;
	end
	endfunction

/*-------- return r_ptr + x --------*/
	function [fifo_ptr_width -1 : 0] r_ptr_plus;
		input [fifo_ptr_width -1 : 0] value;
	begin
		if(value > (fifo_len - 1 - r_ptr) )
			r_ptr_plus = value - (fifo_len-r_ptr);
		else
			r_ptr_plus = r_ptr + value;
	end
	endfunction

//######################
//# FIFO EMPTY/FULL ####
//######################
always @*
begin
	fifo_empty = (fifo_cnt == 0);
	fifo_full = (fifo_cnt == fifo_len);
end

//######################
//# RESET PROCESS ######
//######################
always @ (posedge clk)
begin
if(rst_n == 0)
begin
        cntWindowTime=0;
        dataCnt = 0;
	src = {{ X }};
	dest = {{ DEST }}; 
	dest_STAT = 16; //dest_STAT = {{ DEST_STAT }}

	en_receiveFlit = 1;
	en_receiveCredit = 1;

	sendFlit = 0;
	flit_out = 0;

	sendCredit = 0;
	credit_out = 0;

	count_recv = 0;
	count_send = 0;

	r_ptr = 0;
	w_ptr = 0;
	fifo_cnt = 0;
	
	for(i=0; i < `NUM_VCS; i = i + 1) 
		cnt_credit[i] = `FLIT_BUFFER_DEPTH;
		
	send_cycle_cnt = 0;	
end //end if rst_n == 0
end

//######################
//# ENQUEUE TO FIFO ####
//######################
always @ (posedge clk)
begin
if(rst_n == 1)
begin
	cntWindowTime=cntWindowTime+1;

	//increment send cycle counter
	if(en==1)
		send_cycle_cnt = send_cycle_cnt + {{ SEND_COUNTER_INCREMENT }};

	/* ------------------------------------------ */
	/* ---------- enqueue normal packets -------- */
	/* ------------------------------------------ */
	if(send_cycle_cnt >= 10 && en == 1)
	begin
		if(hasSpace(1))
		begin
			send_cycle_cnt = send_cycle_cnt - 10;
			vc = 0;
                        
			data = dataCnt;//data = {{ X }};
			fifo_data[w_ptr] = {1'b1 /*valid*/, 1'b1 /*tail*/, dest, vc, data};
			//$display("PE({{ X }}) @%3d: Flit '%0x' enqueued to w_ptr:%0d", windowCnt, data,w_ptr);

			w_ptr = w_ptr_plus(1);
			fifo_cnt = fifo_cnt + 1;

			dataCnt = dataCnt + 1;
		end
	end


	/* ------------------------------------------ */
	/* ------------ enqueue statistics  --------- */
	/* ------------------------------------------ */
	if(cntWindowTime == 200 && en==1)
	begin
		$display("----PE({{ X }}) @%3d: send= %0d; recv= %0d ; N=%0d,E=%0d,S=%0d,W=%0d", windowCnt, count_send, count_recv, count_N, count_E, count_S, count_W);

		if(hasSpace(6))
		begin
			vc = 0;
                        //<valid><istail><dest><vc>|<header><src><counter>|

			//0010 sent PE 
			fifo_data[w_ptr] = {1'b1 /*valid*/, 1'b1 /*tail*/, dest_STAT, vc, 4'b0010 , src, count_send};
			//0011 received PE
			fifo_data[w_ptr_plus(1)] = {1'b1 /*valid*/, 1'b1 /*tail*/, dest_STAT, vc, 4'b0011 , src, count_recv};
			//0100 received N
			fifo_data[w_ptr_plus(2)] = {1'b1 /*valid*/, 1'b1 /*tail*/, dest_STAT, vc, 4'b0100 , src, count_N[windowBits-1:0]};
			//0101 received E
			fifo_data[w_ptr_plus(3)] = {1'b1 /*valid*/, 1'b1 /*tail*/, dest_STAT, vc, 4'b0101 , src, count_E[windowBits-1:0]};
			//0110 received S 
			fifo_data[w_ptr_plus(4)] = {1'b1 /*valid*/, 1'b1 /*tail*/, dest_STAT, vc, 4'b0110 , src, count_S[windowBits-1:0]};
			//0111 received W		  
			fifo_data[w_ptr_plus(5)] = {1'b1 /*valid*/, 1'b1 /*tail*/, dest_STAT, vc, 4'b0111 , src, count_W[windowBits-1:0]};

			w_ptr= w_ptr_plus(6);
			fifo_cnt = fifo_cnt + 6;
		end
	end
end // end if rst_n == 1 
end	

//###################################
//# DEQUEUE FROM FIFO, FLOW CONTROL #
//###################################
always @ (posedge clk)
begin
if(rst_n==1)
begin
	/* ------------------------------------------ */
	/* ------------- default outputs ------------ */
	/* ------------------------------------------ */
	en_receiveFlit = 1;
	en_receiveCredit = 1;
	sendFlit = 0;
	flit_out = 0;
	sendCredit = 0;
	credit_out = 0;

	/* ------------------------------------------ */
	/* -- receive a flit and send credit for vc - */
	/* ------------------------------------------ */
	//<valid(1)><istail(1)>dest><vc><data>
	if (flit_in[flit_port_width-1] == 1) //flit is valid
	begin
		//$display("PE({{ X }}) @%3d: Flit '%0x' received", windowCnt, flit_in[63:0]);
		vc = flit_in[flit_port_width-3-dest_bits:`FLIT_DATA_WIDTH];
		credit_out = {1'b1,vc}; //<valid><vc> 
		sendCredit = 1;
		count_recv = count_recv + 1;
	end

	/* ------------------------------------------ */
	/* -------------- receive a credit ---------- */
	/* ------------------------------------------ */
	if (credit_in[credit_port_width-1] == 1)//valid credit
	begin
		vc = credit_in[credit_port_width-2 : 0];//<valid><vc> 
		cnt_credit[vc]=cnt_credit[vc]+1;
		//$display("PE({{ X }}) @%3d: Received credit for vc%0d",windowCnt, vc);
		//$display("PE({{ X }}) @%3d: Credit for for vc%0d now at %0d",windowCnt, vc,cnt_credit[vc] );
	end				

	/* ------------------------------------------ */
	/* ---------------- send a flit ------------- */
	/* ------------------------------------------ */
	if(cnt_credit[0]>0 && !fifo_empty)
	begin
		flit_out = fifo_data[r_ptr];
		sendFlit = 1;
		//$display("PE({{ X }}) @%3d: Flit '%0x' sent from r_ptr:%0d", windowCnt, flit_out[63:0],r_ptr);
                $display("PE({{ X }}) @%3d: Flit '%64b' sent from r_ptr:%0d", windowCnt, flit_out[63:0],r_ptr);

		r_ptr = r_ptr_plus(1);
		fifo_cnt = fifo_cnt - 1;
		count_send = count_send + 1;
		cnt_credit[0] = cnt_credit[0]-1;
		//$display("PE({{ X }}) @%3d: Consumed credit for vc%0d",windowCnt, vc);
		//$display("PE({{ X }}) @%3d: Credit for for vc%0d now at %0d",windowCnt, vc,cnt_credit[vc] );
	end
end //end if rst_n==1
end
			
		
endmodule
