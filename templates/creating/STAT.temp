`include "connect_parameters.v"

module STAT
(
	en,        
	clk,
	rst_n,
	
	flit_in,
	en_receiveFlit,

	credit_out,
	sendCredit,

	recvPortID
);

//################### 
//#LOCAL parameters # 
//###################
	parameter vc_bits = (`NUM_VCS > 1) ? $clog2(`NUM_VCS) : 1;
	parameter dest_bits = $clog2(`NUM_USER_RECV_PORTS);
	parameter flit_port_width = 2 /*valid and tail bits*/+ `FLIT_DATA_WIDTH + dest_bits + vc_bits;
	parameter credit_port_width = 1 + vc_bits; // 1 valid bit

	parameter buffer_len = 15*6; //parameter buffer_len = {{ BUFFERLEN }}; 
	parameter buffer_ptr_width = $clog2(buffer_len);
	parameter buffer_cnt_width = $clog2(buffer_len+1);

	parameter offset_src = FLIT_DATA_WIDTH-1-4; 
	parameter offset_cnt = offset_src - dest_bits;

//#################
//# PORTS + TYPES #
//#################

	/* enable, clock, reset */
	input en;	
	wire  en;
	input clk;	
	wire  clk; 
	input rst_n;	
	wire  rst_n;

	/* flit handling */
	input  [flit_port_width-1:0] flit_in;	
	wire   [flit_port_width-1:0] flit_in;
	output en_receiveFlit;
	reg    en_receiveFlit;

	/* credit handling */
	input  [credit_port_width-1:0] credit_in;
	wire   [credit_port_width-1:0] credit_in;
	output sendCredit;
	reg    sendCredit;

	/* receive port id */
	input [dest_bits-1:0] recvPortID;
	wire  [dest_bits-1:0] recvPortID;

//##########
//# BUFFER #
//##########
	reg [`FLIT_DATA_WIDTH-1:0] buffer_data [buffer_len-1 : 0];
	reg [buffer_ptr_width -1 : 0] r_ptr;
	reg [buffer_ptr_width -1 : 0] w_ptr;
	reg buffer_empty;
	reg buffer_full;
	reg [buffer_cnt_width-1 : 0] buffer_cnt;

//###########################
//# RECEIVING FLITS CONTROL #
//###########################
	reg [vc_bits-1:0] vc;
	reg [`FLIT_DATA_WIDTH-1:0] data;

/*-------- return w_ptr + x --------*/
	function [buffer_ptr_width -1 : 0] w_ptr_plus;
		input [buffer_ptr_width -1 : 0] value;
	begin
		if(value > (buffer_len - 1 - w_ptr) )
			w_ptr_plus = value - (buffer_len-w_ptr);
		else
			w_ptr_plus = w_ptr + value;
	end
	endfunction

/*-------- return r_ptr + x --------*/
	function [buffer_ptr_width -1 : 0] r_ptr_plus;
		input [buffer_ptr_width -1 : 0] value;
	begin
		if(value > (buffer_len - 1 - r_ptr) )
			r_ptr_plus = value - (buffer-r_ptr);
		else
			r_ptr_plus = r_ptr + value;
	end
	endfunction

//#####################
//# BUFFER EMPTY/FULL #
//#####################
always @*
begin
	buffer_empty = (buffer_cnt == 0);
	buffer_full = (buffer_cnt == buffer_len);
end

//######################
//# RESET PROCESS ######
//######################
always @ (posedge clk)
begin
if(rst_n == 0)
begin
	en_receiveFlit = 1;
	en_receiveCredit = 1;

	sendCredit = 0;
	credit_out = 0;

	r_ptr = 0;
	w_ptr = 0;
	buffer_cnt = 0;
	
end //end if rst_n == 0
end

//###################################
//# ENQUEUE TO BUFFER, FLOW CONTROL #
//###################################
always @ (posedge clk)
begin
if(rst_n==1)
begin
	/* ------------------------------------------ */
	/* ------------- default outputs ------------ */
	/* ------------------------------------------ */
	en_receiveFlit = 1;
	en_receiveCredit = 1;
	sendCredit = 0;
	credit_out = 0;

	/* -------------------------------------------------- */
	/* -- receive a flit,enqueue and send credit for vc - */
	/* -------------------------------------------------- */
	//<valid(1)><istail(1)>dest><vc><data>
	if (flit_in[flit_port_width-1] == 1) //flit is valid
	begin
		//$display("PE({{ X }}) @%3d: Flit '%0x' received", windowCnt, flit_in[63:0]);
		vc = flit_in[flit_port_width-3-dest_bits:`FLIT_DATA_WIDTH];
                data = flit_in[flit_port_width-3-dest_bits:0];
		buffer_data[w_ptr]=data;
		w_ptr = w_ptr_plus(1);
		buffer_cnt = buffer_cnt + 1;

		credit_out = {1'b1,vc}; //<valid><vc> 
		sendCredit = 1;
		count_recv = count_recv + 1;
	end

	//<code><src><cnt>
	if(!buffer_empty)
	begin
		data = buffer_data[r_ptr];
		$display("Code:%4b, Src:%d ,Cnt:%d",data[FLIT_DATA_WIDTH-1 : offset_src+1],data[offset_src : offset_cnt+1],data[offset_cnt : 0]);
		r_ptr = r_ptr_plus(1);
		buffer_cnt = buffer_cnt - 1;
	end
end //end if rst_n==1
end

